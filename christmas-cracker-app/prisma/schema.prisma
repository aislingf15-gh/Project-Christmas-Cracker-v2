// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  progressEntries  ProgressEntry[]
  challengeSettings ChallengeSettings?
  leaderboardEntry LeaderboardEntry?

  @@map("users")
}

model ProgressEntry {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime @db.Date
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Daily goals (boolean)
  stepsCompleted    Boolean  @default(false)
  waterGoalMet      Boolean  @default(false)
  proteinGoalMet    Boolean  @default(false)
  sleepGoalMet      Boolean  @default(false)
  readingCompleted  Boolean  @default(false)
  supplementsTaken  Boolean  @default(false)
  exerciseCompleted Boolean  @default(false)
  adultingTaskDone  Boolean  @default(false)
  
  // Quantitative data (optional)
  stepsCount        Int?
  waterIntake       Int?     // in ml
  proteinIntake     Int?     // in grams
  sleepHours        Float?
  readingMinutes    Int?
  exerciseMinutes   Int?
  adultingTask      String?  // description of the task
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint
  @@unique([userId, date])
  @@map("progress_entries")
}

model ChallengeSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Daily goals
  dailyStepsGoal    Int      @default(8000)
  dailyWaterGoal    Int      @default(2000)  // in ml
  dailyProteinGoal  Int      @default(120)   // in grams
  dailySleepGoal    Float    @default(7.5)   // in hours
  dailyReadingGoal  Int      @default(10)    // in minutes
  
  // Exercise settings
  exerciseDaysPerWeek Int     @default(3)
  exerciseMinutesPerSession Int @default(30)
  
  // Challenge dates
  challengeStartDate DateTime @default(dbgenerated("'2024-09-01'::date"))
  challengeEndDate   DateTime @default(dbgenerated("'2024-12-25'::date"))
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_settings")
}

model LeaderboardEntry {
  id                String   @id @default(cuid())
  userId            String   @unique
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  totalDaysTracked  Int      @default(0)
  perfectDays       Int      @default(0)
  lastUpdated       DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leaderboard_entries")
}
